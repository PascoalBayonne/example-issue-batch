#spring.cloud.function.definition=clientRequests
spring.cloud.stream.kafka.binder.brokers=${kafka:localhost}

spring.cloud.stream.bindings.clientRequests.destination=clientRequests
spring.cloud.stream.bindings.clientRequests.content-type=application/json
#spring.profiles.active=manager

spring.cloud.stream.bindings.clientReplies.destination=clientReplies
spring.cloud.stream.bindings.clientReplies.content-type=application/json
spring.cloud.stream.bindings.clientReplies.group=managerConsumerGroup
#spring.jackson.serialization.close-closeable=true
#spring.kafka.producer.value-serializer=pt.bayonne.sensei.RemoteChunking.manager.ChunkSerializer
#spring.kafka.consumer.value-deserializer=pt.bayonne.sensei.RemoteChunking.manager.ChunkDeserializer
#spring.cloud.stream.kafka.binder.producer-properties.key.deserializer=pt.bayonne.sensei.RemoteChunking.manager.ChunkSerializer
spring.cloud.stream.kafka.binder.producer-properties.value.serializer=pt.bayonne.sensei.RemoteChunking.manager.ChunkSerializer
#spring.cloud.stream.kafka.binder.consumer-properties.value.serializer=pt.bayonne.sensei.RemoteChunking.manager.ChunkSerializer
#org.apache.kafka.clients.consumer.ConsumerConfig=pt.bayonne.sensei.RemoteChunking.job.converter.ChunkSerializer
spring.cloud.stream.kafka.binder.autoAddPartitions=true

spring.jackson.serialization.eager-serializer-fetch=true
spring.jpa.hibernate.ddl-auto=create
spring.batch.jdbc.initialize-schema=always
spring.batch.jdbc.schema=classpath:/org/springframework/batch/core/schema-h2.sql


server.port=8085