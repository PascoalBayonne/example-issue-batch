spring.cloud.stream.kafka.binder.brokers=${kafka:localhost}

#consumer base configs
spring.cloud.stream.bindings.clientRequests.destination=clientRequests
spring.cloud.stream.bindings.clientRequests.group=workerConsumerGroup
spring.kafka.producer.value-serializer=pt.bayonne.sensei.RemoteChunking.job.serde.ChunkResponseSerializer
#consumer others configs
spring.cloud.stream.bindings.clientRequests.consumer.concurrency=8
#The concurrency of the inbound consumer.
spring.cloud.stream.bindings.clientRequests.consumer.partitioned=false
#Whether the consumer receives data from a partitioned producer
spring.cloud.stream.kafka.bindings.clientRequests.consumer.start-offset=earliest
spring.cloud.stream.kafka.bindings.clientRequests.consumer.ack-mode=manual
spring.cloud.stream.kafka.bindings.clientRequests.consumer.auto-commit-offset=false



#produces
spring.cloud.stream.bindings.clientReplies.destination=clientReplies
spring.cloud.stream.bindings.clientReplies.producer.use-native-encoding=true
spring.kafka.consumer.value-deserializer=pt.bayonne.sensei.RemoteChunking.job.serde.ChunkRequestDeserializer

spring.cloud.stream.kafka.binder.autoAddPartitions=true


server.port=8088