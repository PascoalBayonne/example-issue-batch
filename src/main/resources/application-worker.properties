spring.cloud.stream.kafka.binder.brokers=${kafka:localhost}

spring.cloud.stream.bindings.clientReplies.destination=clientReplies
spring.cloud.stream.bindings.clientReplies.content-type=application/json

#spring.cloud.stream.kafka.binder.producer-properties.value.serializer=pt.bayonne.sensei.RemoteChunking.worker.ChunkSerializer


org.springframework.logging.level=DEBUG

spring.cloud.stream.bindings.clientRequests.destination=clientRequests
spring.cloud.stream.bindings.clientRequests.content-type=application/json
spring.cloud.stream.bindings.clientRequests.group=workerConsumerGroup


spring.cloud.stream.kafka.binder.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

spring.cloud.stream.kafka.binder.consumer-properties.spring.deserializer.key.delegate.class=org.apache.kafka.common.serialization.JsonDeserializer
spring.cloud.stream.kafka.binder.consumer-properties.spring.deserializer.value.delegate.class=org.apache.kafka.common.serialization.JsonDeserializer

#spring.deserializer.value.delegate.class=org.apache.kafka.common.serialization.StringDeserializer


spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=org.apache.kafka.common.serialization.StringDeserializer
#spring.cloud.stream.kafka.binder.consumer-properties.key.deserializer=pt.bayonne.sensei.RemoteChunking.worker.RequestDeserializer
spring.cloud.stream.kafka.binder.consumer-properties.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer


#spring.cloud.stream.kafka.binder.consumer-properties.value.deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer

spring.cloud.stream.kafka.bindings.clientRequests.consumer.start-offset=earliest
spring.cloud.stream.kafka.bindings.clientRequests.consumer.ack-mode=manual
spring.cloud.stream.kafka.bindings.clientRequests.consumer.auto-commit-offset=false


spring.cloud.stream.kafka.binder.autoAddPartitions=true


spring.jpa.hibernate.ddl-auto=create
spring.batch.jdbc.initialize-schema=always
spring.batch.jdbc.schema=classpath:/org/springframework/batch/core/schema-h2.sql


server.port=8088